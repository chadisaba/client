/*
 * File: app/view/StudyVisitGrid.js
 *
 * This file was generated by Sencha Architect version 4.0.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.StudyVisitGrid', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.studyvisitgrid',

    requires: [
        'MyApp.view.StudyVisitGridViewModel',
        'MyApp.view.StudyVisitGridViewController',
        'Ext.grid.column.Column',
        'Ext.form.field.ComboBox',
        'Ext.view.BoundList',
        'Ext.XTemplate',
        'Ext.form.field.Number',
        'Ext.view.Table',
        'Ext.selection.RowModel'
    ],

    controller: 'studyvisitgrid',
    viewModel: {
        type: 'studyvisitgrid'
    },
    reference: 'studyVisitGridRef',
    itemId: 'studyVisitGridItemId',
    resizable: false,
    forceFit: true,

    bind: {
        title: '{trans.studies}',
        store: '{StudyVisitStore}'
    },
    columns: [
        {
            xtype: 'gridcolumn',
            flex: 2,
            dataIndex: 'studyCode',
            text: 'study',
            editor: {
                xtype: 'combobox',
                itemId: 'studyComboboxItemId',
                allowBlank: false,
                selectOnFocus: true,
                displayField: 'studyCode',
                displayTpl: [
                    '<tpl for=".">{studyCode} : {studyName}</tpl>'
                ],
                queryMode: 'local',
                typeAhead: true,
                valueField: 'studyCode',
                bind: {
                    store: '{StudyComboStore}'
                },
                listeners: {
                    select: 'onStudyComboboxItemIdSelect',
                    change: 'onStudyComboboxItemIdChange'
                },
                listConfig: {
                    xtype: 'boundlist',
                    itemSelector: 'div',
                    itemTpl: [
                        '{studyCode} : {studyName}'
                    ]
                }
            }
        },
        {
            xtype: 'gridcolumn',
            flex: 1,
            dataIndex: 'deviceName',
            text: 'device',
            editor: {
                xtype: 'combobox',
                itemId: 'deviceComboboxItemId',
                allowBlank: false,
                selectOnFocus: true,
                displayField: 'deviceName',
                forceSelection: true,
                queryMode: 'local',
                typeAhead: true,
                valueField: 'deviceName',
                bind: {
                    store: '{DeviceComboStore}'
                },
                listeners: {
                    select: 'onDeviceComboboxItemIdSelect'
                }
            }
        },
        {
            xtype: 'gridcolumn',
            hidden: true,
            dataIndex: 'deviceId',
            text: '',
            editor: {
                xtype: 'textfield',
                itemId: 'deviceIdTextFieldItemId',
                allowBlank: false
            }
        },
        {
            xtype: 'gridcolumn',
            hidden: true,
            dataIndex: 'userId',
            text: '',
            editor: {
                xtype: 'textfield',
                itemId: 'userIdTextFieldItemId'
            }
        },
        {
            xtype: 'gridcolumn',
            flex: 1,
            dataIndex: 'userLName',
            text: 'technician',
            editor: {
                xtype: 'combobox',
                itemId: 'technicianComboboxItemId',
                selectOnFocus: true,
                displayField: 'userLName',
                displayTpl: [
                    '<tpl for=".">{userLName} : {userFName}</tpl>'
                ],
                queryMode: 'local',
                typeAhead: true,
                valueField: 'userLName',
                bind: {
                    store: '{TechnicianComboStore}'
                },
                listConfig: {
                    xtype: 'boundlist',
                    itemSelector: 'div',
                    itemTpl: [
                        '{userLName} {userFName}'
                    ]
                },
                listeners: {
                    change: 'onTechnicianComboboxItemIdChange'
                }
            }
        },
        {
            xtype: 'gridcolumn',
            hidden: true,
            width: 40,
            dataIndex: 'studyVisitImageAvailable',
            text: ''
        },
        {
            xtype: 'gridcolumn',
            hidden: true,
            width: 70,
            dataIndex: 'studyVisitPrice',
            text: 'price',
            editor: {
                xtype: 'numberfield',
                itemId: 'studyVisitPriceTextFieldItemId',
                allowBlank: false
            }
        },
        {
            xtype: 'gridcolumn',
            hidden: true,
            dataIndex: 'studyId',
            text: '',
            editor: {
                xtype: 'textfield',
                itemId: 'studyIdTextFieldItemId'
            }
        }
    ],
    listeners: {
        select: 'select',
        chHist: 'onStudyVisitGridIdChHist',
        afterrender: 'onStudyVisitGridIdAfterRender',
        inEdit: 'onStudyVisitGridIdInEdit',
        resetEdit: 'onStudyVisitGridIdResetEdit',
        saveEdit: 'onStudyVisitGridIdSaveEdit',
        addItem: 'onStudyVisitGridIdAddItem',
        deleteItem: 'onStudyVisitGridIdDeleteItem',
        modifyItem: 'onStudyVisitGridIdModifyItem',
        quitEdit: 'onStudyVisitGridIdQuitEdit',
        beforeedit: 'onStudyVisitGridIdBeforeEdit',
        canceledit: 'onStudyVisitGridIdCanceledit',
        containerclick: 'onStudyVisitGridIdContainerClick',
        edit: 'onStudyVisitGridIdEdit',
        beforecellclick: 'onStudyVisitGridIdBeforeCellClick',
        validateedit: 'onStudyVisitGridIdValidateedit',
        boxready: 'onStudyVisitGridItemIdBoxReady'
    },
    selModel: {
        selType: 'rowmodel',
        mode: 'MULTI'
    },

    initConfig: function(instanceConfig) {
        var me = this,
            config = {};
        me.processStudyVisitGrid(config);
        if (instanceConfig) {
            me.getConfigurator().merge(me, config, instanceConfig);
        }
        return me.callParent([config]);
    },

    processStudyVisitGrid: function(config) {
        GridAddPlugins.addPlugins(this);

    }

});