/*
 * File: app/view/StudyVisitGrid.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.StudyVisitGrid', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.studyvisitgrid',

    requires: [
        'MyApp.view.StudyVisitGridViewModel',
        'MyApp.view.StudyVisitGridViewController',
        'Ext.grid.column.Column',
        'Ext.form.field.ComboBox',
        'Ext.form.field.Number',
        'Ext.view.Table',
        'Ext.selection.RowModel'
    ],

    controller: 'studyvisitgrid',
    viewModel: {
        type: 'studyvisitgrid'
    },
    reference: 'studyVisitGridRef',
    itemId: 'studyVisitGridItemId',
    resizable: false,
    title: '',
    forceFit: true,

    bind: {
        store: '{StudyVisitStore}'
    },
    columns: [
        {
            xtype: 'gridcolumn',
            dataIndex: 'studyName',
            text: '{trans.study}',
            flex: 1,
            editor: {
                xtype: 'combobox',
                itemId: 'studyComboboxItemId',
                allowBlank: false,
                listeners: {
                    select: 'onStudyComboboxItemIdSelect'
                }
            }
        },
        {
            xtype: 'gridcolumn',
            dataIndex: 'deviceName',
            text: '{trans.device}',
            editor: {
                xtype: 'combobox',
                itemId: 'deviceComboboxItemId',
                listeners: {
                    select: 'onDeviceComboboxItemIdSelect'
                }
            }
        },
        {
            xtype: 'gridcolumn',
            dataIndex: 'studyVisitPrice',
            width: 100,
            text: '{trans.price}',
            editor: {
                xtype: 'numberfield',
                itemId: 'studyVisitPriceTextFieldItemId',
                allowBlank: false
            }
        },
        {
            xtype: 'gridcolumn',
            hidden: true,
            dataIndex: 'deviceId',
            text: '',
            editor: {
                xtype: 'textfield',
                itemId: 'deviceIdTextFieldItemId',
                allowBlank: false
            }
        },
        {
            xtype: 'gridcolumn',
            hidden: true,
            dataIndex: 'userId',
            text: '',
            editor: {
                xtype: 'textfield',
                itemId: 'userIdTextFieldItemId'
            }
        },
        {
            xtype: 'gridcolumn',
            dataIndex: 'userLastName',
            text: '{trans.technician}',
            editor: {
                xtype: 'combobox',
                itemId: 'technicianComboboxItemId',
                allowBlank: false,
                listeners: {
                    select: 'onTechnicianComboboxItemIdSelect'
                }
            }
        },
        {
            xtype: 'gridcolumn',
            width: 40,
            dataIndex: 'studyVisitImageAvailable',
            text: ''
        },
        {
            xtype: 'gridcolumn',
            hidden: true,
            dataIndex: 'studyId',
            text: '',
            editor: {
                xtype: 'textfield',
                itemId: 'studyIdTextFieldItemId'
            }
        }
    ],
    listeners: {
        select: 'select',
        chHist: 'onStudyVisitGridIdChHist',
        afterrender: 'onStudyVisitGridIdAfterRender',
        inEdit: 'onStudyVisitGridIdInEdit',
        resetEdit: 'onStudyVisitGridIdResetEdit',
        saveEdit: 'onStudyVisitGridIdSaveEdit',
        addItem: 'onStudyVisitGridIdAddItem',
        deleteItem: 'onStudyVisitGridIdDeleteItem',
        modifyItem: 'onStudyVisitGridIdModifyItem',
        quitEdit: 'onStudyVisitGridIdQuitEdit',
        beforeedit: 'onStudyVisitGridIdBeforeEdit',
        canceledit: 'onStudyVisitGridIdCanceledit',
        containerclick: 'onStudyVisitGridIdContainerClick',
        edit: 'onStudyVisitGridIdEdit',
        beforecellclick: 'onStudyVisitGridIdBeforeCellClick',
        validateedit: 'onStudyVisitGridIdValidateedit',
        boxready: 'onStudyVisitGridItemIdBoxReady'
    },
    selModel: {
        selType: 'rowmodel',
        mode: 'MULTI'
    },

    initConfig: function(instanceConfig) {
        var me = this,
            config = {};
        me.processStudyVisitGrid(config);
        if (instanceConfig) {
            me.getConfigurator().merge(me, config, instanceConfig);
        }
        return me.callParent([config]);
    },

    processStudyVisitGrid: function(config) {
        GridAddPlugins.addPlugins(this);

    }

});