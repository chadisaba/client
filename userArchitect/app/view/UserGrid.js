/*
 * File: app/view/UserGrid.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.UserGrid', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.usergrid',

    requires: [
        'MyApp.view.UserGridViewModel',
        'MyApp.view.UserGridViewController',
        'Ext.grid.column.Column',
        'Ext.form.field.ComboBox',
        'Ext.form.field.Checkbox',
        'Ext.view.Table',
        'Ext.grid.plugin.RowEditing',
        'Ext.selection.RowModel'
    ],

    controller: 'usergrid',
    viewModel: {
        type: 'usergrid'
    },
    reference: 'userGridRef',
    itemId: 'userGridId',
    resizable: false,
    title: '',
    forceFit: true,

    bind: {
        store: '{UserStore}'
    },
    columns: [
        {
            xtype: 'gridcolumn',
            dataIndex: 'userFName',
            text: 'First name',
            editor: {
                xtype: 'textfield',
                itemId: 'userFNameTextFieldItemId',
                allowBlank: false
            }
        },
        {
            xtype: 'gridcolumn',
            dataIndex: 'userLName',
            text: 'Last name',
            editor: {
                xtype: 'textfield',
                itemId: 'userLNameTextFieldItemId',
                allowBlank: false
            }
        },
        {
            xtype: 'gridcolumn',
            dataIndex: 'userLogin',
            text: 'Login',
            editor: {
                xtype: 'textfield',
                itemId: 'userLoginTextFieldItemId',
                allowBlank: false
            }
        },
        {
            xtype: 'gridcolumn',
            dataIndex: 'userPass',
            text: 'Pass',
            editor: {
                xtype: 'textfield',
                itemId: 'userPassTextFieldItemId',
                allowBlank: false
            }
        },
        {
            xtype: 'gridcolumn',
            dataIndex: 'userInitiales',
            text: 'Initiales',
            editor: {
                xtype: 'textfield',
                itemId: 'userInitialesTextFieldItemId'
            }
        },
        {
            xtype: 'gridcolumn',
            itemId: 'myuserzipcodecol',
            dataIndex: 'userZipCode',
            text: 'Code postal',
            editor: {
                xtype: 'textfield',
                itemId: 'userZipCodeTextFieldItemId',
                allowBlank: false,
                listeners: {
                    change: 'onUserZipCodeTextFieldItemIdChange'
                }
            }
        },
        {
            xtype: 'gridcolumn',
            dataIndex: 'cityName',
            text: 'City',
            editor: {
                xtype: 'combobox',
                itemId: 'userCityComboBoxItemId',
                allowBlank: false,
                displayField: 'cityName',
                forceSelection: true,
                valueField: 'cityName',
                bind: {
                    store: '{CityComboStore}'
                },
                listeners: {
                    change: 'onUserCityComboBoxItemIdChange'
                }
            }
        },
        {
            xtype: 'gridcolumn',
            dataIndex: 'userAddress',
            text: 'Address',
            editor: {
                xtype: 'textfield',
                itemId: 'userAddressTextFieldItemId'
            }
        },
        {
            xtype: 'gridcolumn',
            dataIndex: 'userPhone',
            text: 'Phone',
            editor: {
                xtype: 'textfield',
                itemId: 'userPhoneTextFieldItemId'
            }
        },
        {
            xtype: 'gridcolumn',
            dataIndex: 'userFax',
            text: 'Fax',
            editor: {
                xtype: 'textfield',
                itemId: 'userFaxTextFieldItemId'
            }
        },
        {
            xtype: 'gridcolumn',
            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                return Utility.renderer.checkBoxRenderer(value);
            },
            dataIndex: 'active',
            text: 'Active',
            editor: {
                xtype: 'checkboxfield'
            }
        },
        {
            xtype: 'gridcolumn',
            hidden: true,
            dataIndex: 'siteCityId',
            text: 'city Id',
            editor: {
                xtype: 'textfield',
                itemId: 'cityIdTextFieldItemId'
            }
        }
    ],
    listeners: {
        select: 'select',
        chHist: 'onUserGridIdChHist',
        afterrender: 'onUserGridIdAfterRender',
        inEdit: 'onUserGridIdInEdit',
        resetEdit: 'onUserGridIdResetEdit',
        saveEdit: 'onUserGridIdSaveEdit',
        addItem: 'onUserGridIdAddItem',
        deleteItem: 'onUserGridIdDeleteItem',
        modifyItem: 'onUserGridIdModifyItem',
        quitEdit: 'onUserGridIdQuitEdit',
        beforeedit: 'onUserGridIdBeforeEdit',
        canceledit: 'onUserGridIdCanceledit',
        containerclick: 'onUserGridIdContainerClick',
        edit: 'onUserGridIdEdit',
        beforecellclick: 'onUserGridIdBeforeCellClick',
        validateedit: 'onUserGridIdValidateedit'
    },
    plugins: [
        {
            ptype: 'rowediting',
            pluginId: 'rowEdit',
            autoCancel: false,
            clicksToMoveEditor: 0,
            errorSummary: false
        }
    ],
    selModel: {
        selType: 'rowmodel',
        mode: 'MULTI'
    },

    initConfig: function(instanceConfig) {
        var me = this,
            config = {};
        me.processUserGrid(config);
        if (instanceConfig) {
            me.getConfigurator().merge(me, config, instanceConfig);
        }
        return me.callParent([config]);
    },

    processUserGrid: function(config) {
        Plugins.grid.GridEditingPlugin.configure(this);
        this.plugins.push (
                           new Plugins.grid.GridEditingPlugin({pluginId: 'gridediting'}));

    }

});