/*
 * File: app/view/AppointmentForm.js
 *
 * This file was generated by Sencha Architect version 4.1.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.AppointmentForm', {
    extend: 'Ext.form.Panel',
    alias: 'widget.appointmentform',

    requires: [
        'MyApp.view.AppointmentFormViewModel',
        'MyApp.view.AppointmentFormViewController',
        'Ext.form.FieldSet',
        'Ext.form.field.Checkbox',
        'Ext.form.field.ComboBox'
    ],

    controller: 'appointmentform',
    viewModel: {
        type: 'appointmentform'
    },
    height: 500,
    itemId: 'appointmentFormId',
    width: 500,
    bodyPadding: 10,
    title: 'My Form',

    listeners: {
        inEdit: 'onAppointmentFormItemIdInEdit',
        saveEdit: 'onAppointmentFormItemIdSaveEdit',
        resetEdit: 'onAppointmentFormItemIdResetEdit',
        chHist: 'onAppointmentFormItemIdChHist',
        quitEdit: 'onAppointmentFormItemIdQuitEdit'
    },
    items: [
        {
            xtype: 'fieldset',
            title: 'My Fields',
            items: [
                {
                    xtype: 'textfield',
                    anchor: '100%',
                    fieldLabel: 'appointment date',
                    name: 'appointmentDate',
                    allowBlank: false
                },
                {
                    xtype: 'textfield',
                    anchor: '100%',
                    fieldLabel: 'appointment patient',
                    name: 'patientId'
                },
                {
                    xtype: 'checkboxfield',
                    anchor: '100%',
                    fieldLabel: 'appointment emergency',
                    name: 'appointmentIsEmergency',
                    boxLabel: ''
                },
                {
                    xtype: 'checkboxfield',
                    anchor: '100%',
                    fieldLabel: 'appointment Hospitalized',
                    name: 'appointmentIsHospit',
                    boxLabel: ''
                },
                {
                    xtype: 'checkboxfield',
                    anchor: '100%',
                    fieldLabel: 'doctor required',
                    name: 'appointmentMedIsRequired',
                    boxLabel: ''
                },
                {
                    xtype: 'textfield',
                    anchor: '100%',
                    fieldLabel: 'appointment confirmation date',
                    name: 'appointmentDateConfirmation'
                },
                {
                    xtype: 'textfield',
                    anchor: '100%',
                    fieldLabel: 'appointment sms date',
                    name: 'appointmentSmsSentDate'
                },
                {
                    xtype: 'textfield',
                    anchor: '100%',
                    fieldLabel: 'appointment patient confirmation date',
                    name: 'appointmentDateConfirmationByPatient'
                },
                {
                    xtype: 'combobox',
                    anchor: '100%',
                    itemId: 'patientNameComboBoxEditorItemId',
                    fieldLabel: 'patient',
                    name: 'patientName',
                    selectOnFocus: true,
                    displayField: 'patientName',
                    forceSelection: true,
                    queryMode: 'local',
                    valueField: 'patientId',
                    bind: {
                        store: '{PatientNameComboStore}'
                    }
                }
            ]
        }
    ],

    initConfig: function(instanceConfig) {
        var me = this,
            config = {};
        me.processAppointmentForm(config);
        if (instanceConfig) {
            me.getConfigurator().merge(me, config, instanceConfig);
        }
        return me.callParent([config]);
    },

    processAppointmentForm: function(config) {
        FormAddPlugins.addPlugins(this);
    }

});