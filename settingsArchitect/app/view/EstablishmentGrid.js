/*
 * File: app/view/EstablishmentGrid.js
 *
 * This file was generated by Sencha Architect
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.EstablishmentGrid', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.establishmentgrid',

    requires: [
        'MyApp.view.EstablishmentGridViewModel',
        'MyApp.view.EstablishmentGridViewController',
        'Ext.grid.column.Column',
        'Ext.form.field.ComboBox',
        'Ext.form.field.TextArea',
        'Ext.view.Table',
        'Ext.grid.plugin.RowEditing',
        'Ext.selection.RowModel'
    ],

    controller: 'establishmentgrid',
    viewModel: {
        type: 'establishmentgrid'
    },
    reference: 'establishmentGridRef',
    itemId: 'establishmentGridId',
    resizable: false,
    title: '',
    forceFit: true,

    bind: {
        store: '{EstablishmentStore}'
    },
    columns: [
        {
            xtype: 'gridcolumn',
            dataIndex: 'cityId',
            text: 'cityId',
            editor: {
                xtype: 'textfield',
                itemId: 'cityIdTextFieldItemId'
            }
        },
        {
            xtype: 'gridcolumn',
            dataIndex: 'city',
            text: 'city',
            editor: {
                xtype: 'combobox',
                itemId: 'cityComboBoxEditorItemId',
                allowBlank: false,
                selectOnFocus: true,
                forceSelection: true,
                queryMode: 'local',
                bind: {
                    store: '{CityComboStore}'
                },
                listeners: {
                    select: 'onCityComboBoxEditorItemIdSelect'
                }
            }
        },
        {
            xtype: 'gridcolumn',
            dataIndex: 'establishmentCode',
            text: 'code',
            editor: {
                xtype: 'textfield',
                itemId: 'establishmentCodeTextFieldItemId',
                allowBlank: false
            }
        },
        {
            xtype: 'gridcolumn',
            dataIndex: 'establishmentName',
            text: 'name',
            editor: {
                xtype: 'textfield',
                itemId: 'establishmentNameTextFieldItemId',
                allowBlank: false
            }
        },
        {
            xtype: 'gridcolumn',
            dataIndex: 'establishmentZipCode',
            text: 'zip code',
            editor: {
                xtype: 'textfield',
                itemId: 'establishmentZipCodeTextFieldItemId',
                allowBlank: false
            }
        },
        {
            xtype: 'gridcolumn',
            dataIndex: 'establishmentAddress',
            text: 'address',
            editor: {
                xtype: 'textareafield',
                itemId: 'establishmentAddressTextTextAreaItemId'
            }
        },
        {
            xtype: 'gridcolumn',
            dataIndex: 'establishmentPhoneNumber',
            text: 'phone',
            editor: {
                xtype: 'textfield',
                itemId: 'establishmentPhoneNumberTextFieldItemId'
            }
        },
        {
            xtype: 'gridcolumn',
            dataIndex: 'establishmentFaxNumber',
            text: 'fax',
            editor: {
                xtype: 'textfield',
                itemId: 'establishmentFaxNumberTextFieldItemId'
            }
        },
        {
            xtype: 'gridcolumn',
            dataIndex: 'establishmentEmail',
            text: 'email',
            editor: {
                xtype: 'textfield',
                itemId: 'establishmentEmailTextFieldItemId'
            }
        }
    ],
    listeners: {
        select: 'select',
        chHist: 'onEstablishmentGridIdChHist',
        afterrender: 'onEstablishmentGridIdAfterRender',
        inEdit: 'onEstablishmentGridIdInEdit',
        resetEdit: 'onEstablishmentGridIdResetEdit',
        saveEdit: 'onEstablishmentGridIdSaveEdit',
        addItem: 'onEstablishmentGridIdAddItem',
        deleteItem: 'onEstablishmentGridIdDeleteItem',
        duplicateItem: 'onEstablishmentGridIdDuplicateItem',
        modifyItem: 'onEstablishmentGridIdModifyItem',
        quitEdit: 'onEstablishmentGridIdQuitEdit',
        beforeedit: 'onEstablishmentGridIdBeforeEdit',
        canceledit: 'onEstablishmentGridIdCanceledit',
        containerclick: 'onEstablishmentGridIdContainerClick',
        edit: 'onEstablishmentGridIdEdit',
        beforecellclick: 'onEstablishmentGridIdBeforeCellClick',
        validateedit: 'onEstablishmentGridIdValidateedit'
    },
    plugins: [
        {
            ptype: 'rowediting',
            pluginId: 'rowEdit',
            autoCancel: false,
            clicksToMoveEditor: 0,
            errorSummary: false
        }
    ],
    selModel: {
        selType: 'rowmodel',
        mode: 'MULTI'
    },

    initConfig: function(instanceConfig) {
        var me = this,
            config = {};
        me.processEstablishmentGrid(config);
        if (instanceConfig) {
            me.getConfigurator().merge(me, config, instanceConfig);
        }
        return me.callParent([config]);
    },

    processEstablishmentGrid: function(config) {
        GridAddPlugins.addPlugins(this);

    }

});