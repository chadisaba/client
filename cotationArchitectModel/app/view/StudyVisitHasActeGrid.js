/*
 * File: app/view/StudyVisitHasActeGrid.js
 *
 * This file was generated by Sencha Architect version 4.1.1.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.StudyVisitHasActeGrid', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.studyvisithasactegrid',

    requires: [
        'MyApp.view.StudyVisitHasActeGridViewModel',
        'MyApp.view.StudyVisitHasActeGridViewController',
        'Ext.grid.column.Column',
        'Ext.form.field.Text',
        'Ext.form.field.Checkbox',
        'Ext.view.Table',
        'Ext.grid.plugin.RowEditing',
        'Ext.selection.RowModel',
        'Ext.toolbar.Toolbar',
        'Ext.button.Button',
        'Ext.toolbar.Spacer',
        'Ext.toolbar.Separator',
        'Ext.grid.feature.Summary',
        'Ext.grid.feature.Grouping',
        'Ext.XTemplate'
    ],

    controller: 'studyvisithasactegrid',
    viewModel: {
        type: 'studyvisithasactegrid'
    },
    reference: 'studyVisitHasActeGridRef',
    stateId: 'cotation-grid',
    stateful: true,
    itemId: 'studyVisitHasActeGridId',
    title: '',
    forceFit: false,

    bind: {
        store: '{StudyVisitHasActeStore}'
    },
    columns: [
        {
            xtype: 'gridcolumn',
            flex: 1,
            hidden: true,
            dataIndex: 'studyCode',
            text: 'Examen'
        },
        {
            xtype: 'gridcolumn',
            hidden: true,
            dataIndex: 'studyId',
            text: 'studyId A cacher',
            editor: {
                xtype: 'textfield',
                itemId: 'studyIdTextField'
            }
        },
        {
            xtype: 'gridcolumn',
            hidden: true,
            dataIndex: 'studyVisitHasActeType',
            text: 'Type'
        },
        {
            xtype: 'gridcolumn',
            summaryType: 'count',
            flex: 1,
            width: 80,
            dataIndex: 'studyVisitHasActeCode',
            text: 'Acte'
        },
        {
            xtype: 'gridcolumn',
            width: 60,
            dataIndex: 'studyVisitHasActeUnitPrice',
            text: 'Prix Unitaire'
        },
        {
            xtype: 'gridcolumn',
            width: 60,
            dataIndex: 'studyVisitHasActeAssociationNonPrevu',
            text: 'A.N.P.',
            editor: {
                xtype: 'textfield',
                itemId: 'studyVisitHasActeAssociationNonPrevuTextFieldItemId',
                enforceMaxLength: true,
                maskRe: /[0-9]/,
                maxLength: 1
            }
        },
        {
            xtype: 'gridcolumn',
            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                var nf = new Intl.NumberFormat('fr', {style: "currency", currency: "EUR"});
                return '<span>' + nf.format(value) + '</span>';
            },
            summaryType: 'sum',
            width: 80,
            align: 'right',
            dataIndex: 'studyVisitHasActeAmount',
            text: 'Mt. acte',
            editor: {
                xtype: 'textfield',
                itemId: 'studyVisitHasActeAmountTextFieldItemId',
                maskRe: /[.0-9]/
            }
        },
        {
            xtype: 'gridcolumn',
            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                var nf = new Intl.NumberFormat('fr', {style: "currency", currency: "EUR"});
                return '<span>' + nf.format(value) + '</span>';
            },
            summaryType: 'sum',
            width: 80,
            align: 'right',
            dataIndex: 'studyVisitHasActeAmountDepassement',
            text: 'Mt.Dép.',
            editor: {
                xtype: 'textfield',
                itemId: 'studyVisitHasActeAmountDepassementTextFieldItemId',
                maskRe: /[.0-9]/
            }
        },
        {
            xtype: 'gridcolumn',
            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                return Utility.renderer.checkBoxRenderer(value);
            },
            hidden: true,
            dataIndex: 'studyVisitHasActeSuppCharge',
            text: 'supplement charge',
            editor: {
                xtype: 'checkboxfield'
            }
        },
        {
            xtype: 'gridcolumn',
            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                return Utility.renderer.checkBoxRenderer(value);
            },
            hidden: true,
            dataIndex: 'studyVisitHasActeSoumisEntentePrealable',
            text: 'Entente prealable',
            editor: {
                xtype: 'checkboxfield'
            }
        },
        {
            xtype: 'gridcolumn',
            hidden: true,
            dataIndex: 'studyVisitHasActeRefundingCode',
            text: 'Code remboursement',
            editor: {
                xtype: 'textfield',
                itemId: 'studyVisitHasActeRefundingCodeTextFieldItemId'
            }
        },
        {
            xtype: 'gridcolumn',
            width: 80,
            dataIndex: 'studyVisitHasActeQuantity',
            text: 'Quantité',
            editor: {
                xtype: 'textfield',
                itemId: 'studyVisitHasActeQuantityTextFieldItemId',
                enforceMaxLength: true,
                maskRe: /[1-9]/,
                maxLength: 2
            }
        },
        {
            xtype: 'gridcolumn',
            width: 60,
            dataIndex: 'studyVisitHasActeModificators',
            text: 'Modif.',
            editor: {
                xtype: 'textfield',
                itemId: 'studyVisitHasActeModificatorsTextFieldItemId'
            }
        },
        {
            xtype: 'gridcolumn',
            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                return Utility.renderer.checkBoxRenderer(value);
            },
            width: 40,
            dataIndex: 'studyVisitHasActeIsNight',
            text: 'N.',
            editor: {
                xtype: 'checkboxfield'
            }
        },
        {
            xtype: 'gridcolumn',
            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                return Utility.renderer.checkBoxRenderer(value);
            },
            hidden: true,
            width: 60,
            dataIndex: 'studyVisitHasActeIsMultiple',
            text: 'Multiple',
            editor: {
                xtype: 'checkboxfield'
            }
        },
        {
            xtype: 'gridcolumn',
            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                return Utility.renderer.checkBoxRenderer(value);
            },
            width: 40,
            dataIndex: 'studyVisitHasActeIsHoliday',
            text: 'F.',
            editor: {
                xtype: 'checkboxfield'
            }
        },
        {
            xtype: 'gridcolumn',
            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                return Utility.renderer.checkBoxRenderer(value);
            },
            width: 40,
            dataIndex: 'studyVisitHasActeIsEmergency',
            text: 'U.',
            editor: {
                xtype: 'checkboxfield'
            }
        },
        {
            xtype: 'gridcolumn',
            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                return Utility.renderer.checkBoxRenderer(value);
            },
            hidden: true,
            width: 80,
            dataIndex: 'studyVisitHasActeIsDomicile',
            text: 'Domicile',
            editor: {
                xtype: 'checkboxfield'
            }
        },
        {
            xtype: 'gridcolumn',
            hidden: true,
            width: 80,
            dataIndex: 'studyVisitHasActeExoParticuliere',
            text: 'Exo. particulière',
            editor: {
                xtype: 'textfield',
                itemId: 'studyVisitHasActeExoParticuliereTextFieldItemId'
            }
        },
        {
            xtype: 'gridcolumn',
            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                return Utility.renderer.checkBoxRenderer(value);
            },
            hidden: true,
            width: 80,
            dataIndex: 'studyVisitHasActeExceptionalRefunding',
            text: 'Remb. exceptionnel',
            editor: {
                xtype: 'checkboxfield'
            }
        },
        {
            xtype: 'gridcolumn',
            hidden: true,
            width: 60,
            dataIndex: 'studyVisitHasActeDepense',
            text: 'Qualificatif dépense',
            editor: {
                xtype: 'textfield',
                itemId: 'studyVisitHasActeDepenseTextFieldItemId'
            }
        },
        {
            xtype: 'gridcolumn',
            hidden: true,
            width: 60,
            dataIndex: 'studyVisitHasActeDenombrement',
            text: 'Denombrement',
            editor: {
                xtype: 'textfield',
                itemId: 'studyVisitHasActeDenombrementTextFieldItemId'
            }
        },
        {
            xtype: 'gridcolumn',
            hidden: true,
            width: 60,
            dataIndex: 'studyVisitHasActeCodeAccEntentePrealable',
            text: 'Acc. entente préalable',
            editor: {
                xtype: 'textfield',
                itemId: 'studyVisitHasActeCodeAccEntentePrealableTextFieldItemId'
            }
        },
        {
            xtype: 'gridcolumn',
            hidden: true,
            dataIndex: 'studyVisitHasActeDateEntentePrealable',
            text: 'Date Entente',
            editor: {
                xtype: 'textfield',
                itemId: 'studyVisitHasActeDateEntentePrealableTextFieldItemId'
            }
        },
        {
            xtype: 'gridcolumn',
            hidden: true,
            width: 60,
            dataIndex: 'studyVisitHasActeCoefficient',
            text: 'Coefficient',
            editor: {
                xtype: 'textfield',
                itemId: 'studyVisitHasActeCoefficientTextFieldItemId'
            }
        },
        {
            xtype: 'gridcolumn',
            hidden: true,
            width: 60,
            dataIndex: 'studyVisitHasActeCodeAffine',
            text: 'Code affine',
            editor: {
                xtype: 'textfield',
                itemId: 'studyVisitHasActeCodeAffineTextFieldItemId'
            }
        },
        {
            xtype: 'gridcolumn',
            hidden: true,
            width: 80,
            dataIndex: 'studyVisitHasActeAcceptedModificators',
            text: 'Modificateurs possibles'
        }
    ],
    listeners: {
        select: 'select',
        chHist: 'onStudyVisitHasActeGridIdChHist',
        afterrender: 'onStudyVisitHasActeGridIdAfterRender',
        inEdit: 'onStudyVisitHasActeGridIdInEdit',
        resetEdit: 'onStudyVisitHasActeGridIdResetEdit',
        saveEdit: 'onStudyVisitHasActeGridIdSaveEdit',
        addItem: 'onStudyVisitHasActeGridIdAddItem',
        deleteItem: 'onStudyVisitHasActeGridIdDeleteItem',
        modifyItem: 'onStudyVisitHasActeGridIdModifyItem',
        quitEdit: 'onStudyVisitHasActeGridIdQuitEdit',
        beforeedit: 'onStudyVisitHasActeGridIdBeforeEdit',
        canceledit: 'onStudyVisitHasActeGridIdCanceledit',
        containerclick: 'onStudyVisitHasActeGridIdContainerClick',
        edit: 'onStudyVisitHasActeGridIdEdit',
        beforecellclick: 'onStudyVisitHasActeGridIdBeforeCellClick',
        validateedit: 'onStudyVisitHasActeGridIdValidateedit'
    },
    plugins: [
        {
            ptype: 'rowediting',
            pluginId: 'rowEdit',
            autoCancel: false,
            clicksToMoveEditor: 0,
            errorSummary: false
        }
    ],
    selModel: {
        selType: 'rowmodel',
        mode: 'MULTI'
    },
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'top',
            itemId: 'editingtoolbar',
            items: [
                {
                    xtype: 'container',
                    itemId: 'addDeleteReplaceContainer',
                    layout: {
                        type: 'hbox',
                        align: 'stretch'
                    },
                    items: [
                        {
                            xtype: 'button',
                            itemId: 'addStudyButton',
                            glyph: 'xf067@FontAwesome',
                            text: 'Ajouter',
                            listeners: {
                                click: 'onAddStudyButtonClick'
                            }
                        },
                        {
                            xtype: 'tbspacer',
                            width: 10
                        },
                        {
                            xtype: 'button',
                            itemId: 'deleteStudyButton',
                            glyph: 'xf014@FontAwesome',
                            text: 'Supprimer',
                            listeners: {
                                click: 'onDeleteStudyButtonClick'
                            }
                        },
                        {
                            xtype: 'tbspacer',
                            width: 10
                        },
                        {
                            xtype: 'button',
                            itemId: 'replaceStudyButton',
                            glyph: 'xf0ec@FontAwesome',
                            text: 'Remplacer',
                            listeners: {
                                click: 'onReplaceStudyButtonClick'
                            }
                        },
                        {
                            xtype: 'tbspacer',
                            width: 10
                        }
                    ]
                },
                {
                    xtype: 'tbseparator'
                },
                {
                    xtype: 'container',
                    layout: {
                        type: 'hbox',
                        align: 'stretch'
                    },
                    items: [
                        {
                            xtype: 'tbspacer',
                            width: 10
                        },
                        {
                            xtype: 'button',
                            itemId: 'saveButton',
                            glyph: 'xf0c7@FontAwesome',
                            text: 'Enregistrer',
                            listeners: {
                                click: 'onSaveButtonClick'
                            }
                        },
                        {
                            xtype: 'tbspacer',
                            width: 10
                        },
                        {
                            xtype: 'button',
                            itemId: 'validateButton',
                            glyph: 'xf00c@FontAwesome',
                            text: 'Valider',
                            listeners: {
                                click: 'onValidateButtonClick'
                            }
                        },
                        {
                            xtype: 'tbspacer',
                            width: 10
                        },
                        {
                            xtype: 'button',
                            itemId: 'devalidateButton',
                            glyph: 'xf127@FontAwesome',
                            text: 'Dévalider',
                            listeners: {
                                click: 'onDevalidateButtonClick'
                            }
                        }
                    ]
                }
            ]
        }
    ],
    features: [
        {
            ftype: 'summary'
        },
        {
            ftype: 'grouping',
            groupHeaderTpl: [
                '{[values.rows[0].data.studyCode]}'
            ]
        }
    ],

    initConfig: function(instanceConfig) {
        var me = this,
            config = {};
        me.processStudyVisitHasActeGrid(config);
        if (instanceConfig) {
            me.getConfigurator().merge(me, config, instanceConfig);
        }
        return me.callParent([config]);
    },

    processStudyVisitHasActeGrid: function(config) {
        GridAddPlugins.addPlugins(this,{onlyModifyWithoutEdit:true,liveSearch:false});

    }

});