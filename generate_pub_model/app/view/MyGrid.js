/*
 * File: app/view/MyGrid.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.MyGrid', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.mygrid',

    requires: [
        'MyApp.view.MyGridViewModel',
        'MyApp.view.MyGridViewController',
        'Ext.grid.column.Column',
        'Ext.form.field.Text',
        'Ext.grid.plugin.RowEditing',
        'Ext.selection.RowModel'
    ],

    controller: 'mygrid',
    viewModel: {
        type: 'mygrid'
    },
    reference: 'myGridRef',
    itemId: 'myGridId',
    resizable: false,
    title: '',
    forceFit: true,

    bind: {
        store: '{MyStore}'
    },
    columns: [
              
                {
            xtype: 'gridcolumn',
            dataIndex: 'id',
            text: 'ID'
                    
                    
        },
                   
                {
            xtype: 'gridcolumn',
            dataIndex: 'name',
            text: 'Name'
                    
                     ,editor: {
                        xtype: 'textfield'
                        
                }
        },
                   
                {
            xtype: 'gridcolumn',
            dataIndex: 'type',
            text: 'type'
                    
                     ,editor: {
                        xtype: 'combobox',
                        displayField: 'type',
                        itemId: 'typeComboBoxEditorItemId',
                        forceSelection: true,
                        queryMode: 'combobox',
                          
                       
                        selectOnFocus: true,
                        valueField: 'type'       
                        ,
                        bind: {
                                store: '{TypeComboStore}'
                                 }
                }
        },
                   
                {
            xtype: 'gridcolumn',
            dataIndex: 'cat',
            text: 'cat'
                    
                     ,editor: {
                        xtype: 'combobox',
                        displayField: 'cat',
                        itemId: 'catComboBoxEditorItemId',
                        forceSelection: true,
                        queryMode: 'combobox',
                          
                       
                        selectOnFocus: true,
                        valueField: 'cat'       
                        ,
                        bind: {
                                store: '{CatComboStore}'
                                 }
                }
        },
                   
                {
            xtype: 'gridcolumn',
            dataIndex: 'comment',
            text: 'Comment'
                    
                     ,editor: {
                        xtype: 'textarea'
                        
                }
        }
    ],
    listeners: {
        select: 'select',
        chHist: 'onMyGridIdChHist',
        afterrender: 'onMyGridIdAfterRender',
        inEdit: 'onMyGridIdInEdit',
        resetEdit: 'onMyGridIdResetEdit',
        saveEdit: 'onMyGridIdSaveEdit',
        addItem: 'onMyGridIdAddItem',
        deleteItem: 'onMyGridIdDeleteItem',
        modifyItem: 'onMyGridIdModifyItem',
        quitEdit: 'onMyGridIdQuitEdit',
        beforeedit: 'onMyGridIdBeforeEdit',
        canceledit: 'onMyGridIdCanceledit',
        containerclick: 'onMyGridIdContainerClick',
        edit: 'onMyGridIdEdit',
        beforecellclick: 'onMyGridIdBeforeCellClick',
        validateedit: 'onMyGridIdValidateedit'
    },
    plugins: [
        {
            ptype: 'rowediting',
            pluginId: 'rowEdit',
            autoCancel: false,
            clicksToMoveEditor: 0,
            errorSummary: false
        }
    ],
    selModel: {
        selType: 'rowmodel',
        mode: 'MULTI'
    },

    initConfig: function(instanceConfig) {
        var me = this,
            config = {};
        me.processMyGrid(config);
        if (instanceConfig) {
            me.getConfigurator().merge(me, config, instanceConfig);
        }
        return me.callParent([config]);
    },

    processMyGrid: function(config) {
        Plugins.grid.GridEditingPlugin.configure(this);
        this.plugins.push (
                           new Plugins.grid.GridEditingPlugin({pluginId: 'gridediting'}));

    }

});