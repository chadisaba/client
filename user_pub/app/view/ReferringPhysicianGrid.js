/*
 * File: app/view/ReferringPhysicianGrid.js
 *
 * This file was generated by Sencha Architect version 3.2.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.ReferringPhysicianGrid', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.referringphysiciangrid',

    requires: [
        'MyApp.view.ReferringPhysicianGridViewModel',
        'MyApp.view.ReferringPhysicianGridViewController',
        'Ext.grid.column.Column',
        'Ext.form.field.ComboBox',
        'Ext.form.field.TextArea',
        'Ext.form.field.Checkbox',
        'Ext.view.Table',
        'Ext.grid.plugin.RowEditing',
        'Ext.selection.RowModel'
    ],

    controller: 'referringphysiciangrid',
    viewModel: {
        type: 'referringphysiciangrid'
    },
    reference: 'referringPhysicianGridRef',
    itemId: 'referringPhysicianGridId',
    resizable: false,
    title: '',
    forceFit: true,

    bind: {
        store: '{ReferringPhysicianStore}'
    },
    columns: [
        {
            xtype: 'gridcolumn',
            hidden: true,
            dataIndex: 'cityId',
            text: '',
            editor: {
                xtype: 'textfield',
                itemId: 'cityIdTextFieldItemId'
            }
        },
        {
            xtype: 'gridcolumn',
            dataIndex: 'referringPhysicianFName',
            text: 'Prénom',
            editor: {
                xtype: 'textfield',
                itemId: 'referringPhysicianFNameTextFieldItemId'
            }
        },
        {
            xtype: 'gridcolumn',
            dataIndex: 'referringPhysicianLName',
            text: 'Nom',
            editor: {
                xtype: 'textfield',
                itemId: 'referringPhysicianLNameTextFieldItemId'
            }
        },
        {
            xtype: 'gridcolumn',
            dataIndex: 'referringPhysicianGender',
            text: 'Civilité',
            editor: {
                xtype: 'textfield',
                itemId: 'referringPhysicianGenderTextFieldItemId'
            }
        },
        {
            xtype: 'gridcolumn',
            dataIndex: 'referringPhysicianTitle',
            text: 'Titre',
            editor: {
                xtype: 'textfield',
                itemId: 'referringPhysicianTitleTextFieldItemId'
            }
        },
        {
            xtype: 'gridcolumn',
            width: 70,
            dataIndex: 'referringPhysicianZipCode',
            text: 'C.P.',
            editor: {
                xtype: 'textfield',
                itemId: 'referringPhysicianZipCodeTextFieldItemId',
                listeners: {
                    change: 'onReferringPhysicianZipCodeTextFieldItemIdChange'
                }
            }
        },
        {
            xtype: 'gridcolumn',
            width: 150,
            dataIndex: 'cityName',
            text: 'Ville',
            editor: {
                xtype: 'combobox',
                itemId: 'cityNaComboBoxEditorItemId',
                selectOnFocus: true,
                displayField: 'cityName',
                forceSelection: true,
                queryMode: 'local',
                valueField: 'cityName',
                bind: {
                    store: '{CityNaComboStore}'
                },
                listeners: {
                    change: 'onCityNaComboBoxEditorItemIdChange'
                }
            }
        },
        {
            xtype: 'gridcolumn',
            dataIndex: 'referringPhysicianAddress',
            text: 'Adresse',
            editor: {
                xtype: 'textareafield',
                itemId: 'referringPhysicianAddressTextFieldItemId'
            }
        },
        {
            xtype: 'gridcolumn',
            dataIndex: 'referringPhysicianPhoneNumber',
            text: 'Tél',
            editor: {
                xtype: 'textfield',
                itemId: 'referringPhysicianPhoneNumberTextFieldItemId'
            }
        },
        {
            xtype: 'gridcolumn',
            dataIndex: 'referringPhysicianFaxNumber',
            text: 'Fax',
            editor: {
                xtype: 'textfield',
                itemId: 'referringPhysicianFaxNumberTextFieldItemId'
            }
        },
        {
            xtype: 'gridcolumn',
            dataIndex: 'referringPhysicianEmail',
            text: 'mail',
            editor: {
                xtype: 'textfield',
                itemId: 'referringPhysicianEmailTextFieldItemId'
            }
        },
        {
            xtype: 'gridcolumn',
            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                return Utility.renderer.checkBoxRenderer(value);
            },
            dataIndex: 'active',
            text: 'Active',
            editor: {
                xtype: 'checkboxfield'
            }
        }
    ],
    listeners: {
        select: 'select',
        chHist: 'onReferringPhysicianGridIdChHist',
        afterrender: 'onReferringPhysicianGridIdAfterRender',
        inEdit: 'onReferringPhysicianGridIdInEdit',
        resetEdit: 'onReferringPhysicianGridIdResetEdit',
        saveEdit: 'onReferringPhysicianGridIdSaveEdit',
        addItem: 'onReferringPhysicianGridIdAddItem',
        deleteItem: 'onReferringPhysicianGridIdDeleteItem',
        modifyItem: 'onReferringPhysicianGridIdModifyItem',
        quitEdit: 'onReferringPhysicianGridIdQuitEdit',
        beforeedit: 'onReferringPhysicianGridIdBeforeEdit',
        canceledit: 'onReferringPhysicianGridIdCanceledit',
        containerclick: 'onReferringPhysicianGridIdContainerClick',
        edit: 'onReferringPhysicianGridIdEdit',
        beforecellclick: 'onReferringPhysicianGridIdBeforeCellClick',
        validateedit: 'onReferringPhysicianGridIdValidateedit'
    },
    plugins: [
        {
            ptype: 'rowediting',
            pluginId: 'rowEdit',
            autoCancel: false,
            clicksToMoveEditor: 0,
            errorSummary: false
        }
    ],
    selModel: {
        selType: 'rowmodel',
        mode: 'MULTI'
    },

    initConfig: function(instanceConfig) {
        var me = this,
            config = {};
        me.processReferringPhysicianGrid(config);
        if (instanceConfig) {
            me.getConfigurator().merge(me, config, instanceConfig);
        }
        return me.callParent([config]);
    },

    processReferringPhysicianGrid: function(config) {
        Plugins.grid.GridEditingPlugin.configure(this);
        this.plugins.push (
                           new Plugins.grid.GridEditingPlugin({pluginId: 'gridediting'}));

    }

});