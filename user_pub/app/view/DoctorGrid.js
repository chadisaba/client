/*
 * File: app/view/DoctorGrid.js
 *
 * This file was generated by Sencha Architect version 4.0.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.DoctorGrid', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.doctorgrid',

    requires: [
        'MyApp.view.DoctorGridViewModel',
        'MyApp.view.DoctorGridViewController',
        'Ext.grid.column.Column',
        'Ext.form.field.ComboBox',
        'Ext.form.field.Checkbox',
        'Ext.view.Table',
        'Ext.grid.plugin.RowEditing',
        'Ext.selection.RowModel'
    ],

    controller: 'doctorgrid',
    viewModel: {
        type: 'doctorgrid'
    },
    reference: 'doctorGridRef',
    itemId: 'doctorGridId',
    resizable: false,
    title: '',
    forceFit: true,

    bind: {
        store: '{DoctorStore}'
    },
    columns: [
        {
            xtype: 'gridcolumn',
            hidden: true,
            dataIndex: 'userId',
            text: 'UtilisateurId',
            editor: {
                xtype: 'textfield',
                itemId: 'userIdTextFieldItemId'
            }
        },
        {
            xtype: 'gridcolumn',
            dataIndex: 'userInitiales',
            text: 'Utilisateur',
            editor: {
                xtype: 'combobox',
                itemId: 'userInitialComboBoxEditorItemId',
                allowBlank: false,
                selectOnFocus: true,
                displayField: 'userInitiales',
                forceSelection: true,
                queryMode: 'local',
                valueField: 'userInitiales',
                bind: {
                    store: '{UserInitialComboStore}'
                },
                listeners: {
                    select: 'onUserInitialComboBoxEditorItemIdSelect'
                }
            }
        },
        {
            xtype: 'gridcolumn',
            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                return Utility.renderer.checkBoxRenderer(value);
            },
            dataIndex: 'doctorIsSubstitute',
            text: 'Substituté',
            editor: {
                xtype: 'checkboxfield'
            }
        },
        {
            xtype: 'gridcolumn',
            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                return Utility.renderer.checkBoxRenderer(value);
            },
            dataIndex: 'doctoHasOptionCoordination',
            text: 'option coordination',
            editor: {
                xtype: 'checkboxfield'
            }
        },
        {
            xtype: 'gridcolumn',
            dataIndex: 'doctorSenologUID',
            text: 'Senolog UID',
            editor: {
                xtype: 'textfield',
                itemId: 'doctorSenologUIDTextFieldItemId'
            }
        },
        {
            xtype: 'gridcolumn',
            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                return Utility.renderer.checkBoxRenderer(value);
            },
            dataIndex: 'doctorHasSector2',
            text: 'Secteur 2',
            editor: {
                xtype: 'checkboxfield'
            }
        },
        {
            xtype: 'gridcolumn',
            renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                return Utility.renderer.checkBoxRenderer(value);
            },
            dataIndex: 'active',
            text: 'Activé',
            editor: {
                xtype: 'checkboxfield'
            }
        }
    ],
    listeners: {
        select: 'select',
        chHist: 'onDoctorGridIdChHist',
        afterrender: 'onDoctorGridIdAfterRender',
        inEdit: 'onDoctorGridIdInEdit',
        resetEdit: 'onDoctorGridIdResetEdit',
        saveEdit: 'onDoctorGridIdSaveEdit',
        addItem: 'onDoctorGridIdAddItem',
        deleteItem: 'onDoctorGridIdDeleteItem',
        modifyItem: 'onDoctorGridIdModifyItem',
        quitEdit: 'onDoctorGridIdQuitEdit',
        beforeedit: 'onDoctorGridIdBeforeEdit',
        canceledit: 'onDoctorGridIdCanceledit',
        containerclick: 'onDoctorGridIdContainerClick',
        edit: 'onDoctorGridIdEdit',
        beforecellclick: 'onDoctorGridIdBeforeCellClick',
        validateedit: 'onDoctorGridIdValidateedit'
    },
    plugins: [
        {
            ptype: 'rowediting',
            pluginId: 'rowEdit',
            autoCancel: false,
            clicksToMoveEditor: 0,
            errorSummary: false
        }
    ],
    selModel: {
        selType: 'rowmodel',
        mode: 'MULTI'
    },

    initConfig: function(instanceConfig) {
        var me = this,
            config = {};
        me.processDoctorGrid(config);
        if (instanceConfig) {
            me.getConfigurator().merge(me, config, instanceConfig);
        }
        return me.callParent([config]);
    },

    processDoctorGrid: function(config) {
        Plugins.grid.GridEditingPlugin.configure(this);
        this.plugins.push (
                           new Plugins.grid.GridEditingPlugin({pluginId: 'gridediting'}));

    }

});