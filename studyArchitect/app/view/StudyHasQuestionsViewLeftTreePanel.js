/*
 * File: app/view/StudyHasQuestionsViewLeftTreePanel.js
 *
 * This file was generated by Sencha Architect version 4.0.2.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.1.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.1.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.StudyHasQuestionsViewLeftTreePanel', {
    extend: 'Ext.tree.Panel',
    alias: 'widget.studyhasquestionsviewlefttreepanel',

    requires: [
        'MyApp.view.StudyHasQuestionsViewLeftTreePanelViewModel',
        'MyApp.view.StudyHasQuestionsViewLeftTreePanelViewController',
        'Ext.tree.View',
        'Ext.tree.Column',
        'Ext.selection.RowModel',
        'Ext.toolbar.Toolbar',
        'Ext.form.field.Text',
        'Ext.form.trigger.Trigger'
    ],

    controller: 'studyhasquestionsviewlefttreepanel',
    viewModel: {
        type: 'studyhasquestionsviewlefttreepanel'
    },
    height: 250,
    itemId: 'leftTreePanel',
    width: 400,
    title: 'Toutes les questions',
    hideHeaders: true,
    root: {
        text: 'Root',
        expanded: true,
        children: [
            
        ]
    },
    rootVisible: false,

    bind: {
        store: '{LeftTreeStore}'
    },
    columns: [
        {
            xtype: 'treecolumn',
            flex: 1,
            dataIndex: 'name',
            text: 'MyTreeColumn'
        },
        {
            xtype: 'gridcolumn',
            dataIndex: 'duration',
            text: 'MyColumn'
        }
    ],
    selModel: {
        selType: 'rowmodel',
        mode: 'MULTI'
    },
    listeners: {
        select: 'onLeftTreePanelSelect',
        leftTreeSelectEvent: 'onLeftTreePanelLeftTreeSelectEvent'
    },
    dockedItems: [
        {
            xtype: 'toolbar',
            dock: 'top',
            items: [
                {
                    xtype: 'textfield',
                    itemId: 'filterField',
                    fieldLabel: 'Filter',
                    triggers: {
                        mytrigger: {
                            handler: function(field, trigger, e) {
                                field.setValue('');
                            },
                            cls: 'x-form-clear-trigger'
                        }
                    },
                    listeners: {
                        change: 'onFilterFieldChange'
                    }
                }
            ]
        }
    ],

    initConfig: function(instanceConfig) {
        var me = this,
            config = {};
        me.processStudyHasQuestionsViewLeftTreePanel(config);
        if (instanceConfig) {
            me.getConfigurator().merge(me, config, instanceConfig);
        }
        return me.callParent([config]);
    },

    processStudyHasQuestionsViewLeftTreePanel: function(config) {
        Utility.grid.addInfoCol(this);
    }

});